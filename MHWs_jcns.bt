//------------------------------------------------
//--- 010 Editor v15.0.1 Binary Template
//
//      File: MHWs_jcns.bt
//   Authors: XenonValstrax
//   Version: 0.2b
//   Purpose: Parsing MHWilds Joint Constraints (*.jcns) files
//  Category: MHWilds
// File Mask: *.jcns.*
//  ID Bytes: 
//   History: 
//------------------------------------------------

local string mode;

struct HEADER 
{
    struct TAG
    {
        uint version;
        byte type[4];
        uint64 unkINT1;
        uint64 unkOffset1;
        uint64 unkINT1_1;
        uint64 TableOffset;
        uint64 unkINT1_2;
        FSeek(unkOffset1);
        uint64 unkINT2;
        uint64 unkINT2_1;
        FSeek(TableOffset);
        uint64 RecordOffset;
        uint64 unkINT2_2;
    } Tags <comment="Usually unnecessary to modify.">;
    FSeek(Tags.RecordOffset);
    uint64 EndOfHeader;
    uint64 BodyOffset;
    uint64 EndOfBody;
    uint64 UnknownINT64[7];
    uint64 UnknownOffset;
    uint64 ReferenceTableOffset;
    short UnknownShort;
    short ComponentAmount;
    uint ReferenceAmount;
    byte UnknownBytes[24];
    local string readStr;
};

struct AXIS
{
    float X <name="Axis X", fgcolor=0x5042FF, bgcolor=0x000070>;
    float Y <name="Axis Y", fgcolor=0x00FF00, bgcolor=0x007000>;
    float Z <name="Axis Z", fgcolor=0xFFAA50, bgcolor=0x700000>;
};

struct WStringOffset
{
    uint64 WStrOffset;
    local uint64 ReturnPos = FTell();
    FSeek(WStrOffset);
    wstring WString <bgcolor=0x666666, fgcolor=0xFF00FA>; //<fgcolor=0xFFBB70>;
    FSeek(ReturnPos);
};

struct ConstraintTarget
{
    uint64 OffsetConstraintData;
    local uint ReturnPos = FTell();
    FSeek(OffsetConstraintData);
    uint64 UnkINT64CI0 <name="UnknownINT64">;
    WStringOffset Target <name="Target: Name", read=WString>;
    uint64 TargetHash <name="Target: Hash", comment="Maybe bone hash.">;
    uint64 UnkINT64CI1 <name="UnknownINT64", comment="Usually 771.">;
    AXIS UnknownAxis[3] <open=true>;
    float UnknownFloat;
    local string readStr;
    SPrintf(readStr, "%s - %u", Target.WString, TargetHash);
    //wstring ConstraintTarget <bgcolor=0x666666, fgcolor=0xFF00FA>;
    FSeek(ReturnPos);
};

struct ConstraintSet
{
    uint64 UnkINT64CS0 <name="UnknownINT64">;
    ConstraintTarget CTarget <name="Constraint: Target", read=readStr>;
    WStringOffset ConstraintName <name="Object: Name", read=WString>;
    uint64 UnknownINT64CS1 <name="UnknownINT64">;
    uint64 ObjectHash <name="Object: Hash", comment="Maybe bone hash.">;
    uint64 ConstraintHash <name="UnknownHash", comment="Maybe constraint hash.">;
    float UnknownFloat[4];
    uint64 UnknownINT64CS2[2] <name="UnknownINT64">;
    local string readStr;
    SPrintf(readStr, "%s - %s [%u - %u] (%I64u)", ConstraintName.WString, CTarget.Target.WString, ObjectHash, CTarget.TargetHash, ConstraintHash);
};

struct ConstraintMap
{
    local uint _ = 0;
    for (_; _<header.ComponentAmount; ++_)
    {
        //ConstraintSet CS <name="ConstraintSet", read=ReferenceHash>;
        ConstraintSet CS <name="ConstraintSet", read=readStr>;
    }
};

struct Reference
{
    uint64 Offset;
    uint64 UnknownINT64;
    if (Offset != 0)
    {
        local uint ReturnPos = FTell();
        FSeek(Offset);
        uint ObjectHash <comment="Maybe bone hash.">;
        uint TargetHash <comment="Maybe bone hash.">;
        local string str;
        SPrintf(str, "%u - %u", (uint)ObjectHash, (uint)TargetHash);
        FSeek(ReturnPos);
    }
};

struct RefMap
{
    local uint _ = 0;
    for (_; _<header.ReferenceAmount; ++_)
    {
        Reference Ref <name="Reference", read=str>;
    }
    
};

struct BODY
{
    if (header.ComponentAmount > 0)
    {
        ConstraintMap ConstraintSets <read=header.ComponentAmount>;
        FSeek(header.ReferenceTableOffset);
    }
    if (header.ReferenceAmount > 0)
    {
        FSeek(header.ReferenceTableOffset);
        RefMap References <read=header.ReferenceAmount>;
    }
};

HEADER header <name="JCNS Header", read=readStr>;
SPrintf(header.readStr, "VERSION %u", header.Tags.version);
if (header.Tags.version == 29) //MHWs
{
    mode = "MHWs";
    if (header.ComponentAmount > 0)
    {
        FSeek(header.BodyOffset);
        BODY body <name="JCNS Body", fgcolor=0xFFBD9A, open=true>;
    }
    
}
if (header.Tags.version == 21) //MHRS
{
    mode = "MHRS";
}
