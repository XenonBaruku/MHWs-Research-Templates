//------------------------------------------------
//--- 010 Editor v15.0.1 Binary Template
//
//      File: RE_Engine_jcns.bt
//   Authors: XenonValstrax
//   Version: 0.63
//   Purpose: Parsing Joint Constraints (*.jcns) files from Most RE Games
//  Category: RE Engine
// File Mask: *.jcns.*
//  ID Bytes: 
//   History: 
//------------------------------------------------
// - STILL WIP. Not sure everything is correct -
//  Almost done...
//  TODO:
//      1) Editing (Maybe do this in Blender or something else)
//      2) Full unicode support for hash generate
//      
// < SUPPORTED VERSIONS / GAMES >
//     *.11 - Resident Evil 2 Remake
//     *.12 - Resident Evil 3 Remake
//     *.16 - Resident Evil 8
//     *.21 - Monster Hunter Rise Sunbreak
//     *.22 - Resident Evil 4 Remake
//     *.29 - Monster Hunter Wilds

LittleEndian();
SetUnoptimizedArraysCollapsible(0);
local uint32 _;

//—————————————————/* - TYPES - */—————————————————//
// vec3
typedef struct
{
    float axisX <name="X", fgcolor=0x5042FF, bgcolor=0x000070>;
    float axisY <name="Y", fgcolor=0x00FF00, bgcolor=0x007000>;
    float axisZ <name="Z", fgcolor=0xFFAA50, bgcolor=0x700000>;
} 
vec3 <read=Str("[%f, %f, %f]", axisX, axisY, axisZ), write=Vec3FWrite>;

// vec4
typedef struct
{
    float axisX <name="X", fgcolor=0x5042FF, bgcolor=0x000070>;
    float axisY <name="Y", fgcolor=0x00FF00, bgcolor=0x007000>;
    float axisZ <name="Z", fgcolor=0xFFAA50, bgcolor=0x700000>;
    float axisW <name="W", fgcolor=0xEADE00, bgcolor=0x7E6A00>;
} 
vec4 <read=Str("[%f, %f, %f, %f]", axisX, axisY, axisZ, axisW), write=Vec4FWrite>;

enum <uint8> TransformationID 
{ 
    Location, 
    Rotation, 
    Scale, 
    BlendShape,
    UnkCtrl_4,
    UnkTopBank_5,
    Material_Color=7, 
    Material_4D, 
    Material_3D, 
    Material_2D, 
    Scalar, 
    Unknown_12,
    UnkRotation_13, 
    UnkRotation_14, 
    UnkRotation_15, 
    UnkRotation_16
};

enum <uint8> AxisID { X, Y, Z, W, UnknownAxis_4, UnknownAxis_5, UnknownAxis_6, UnknownAxis_7, UnknownAxis_8 };
//enum <uint8> AxisID { X, Y, Z, W };


// range
typedef struct
{
    float min <name="Minimum">;
    float _UnknownFloat32;
    float max <name="Maximum">;
} 
range <read=Str("[%.3f, %.3f]", min, max), write=RangeFWrite>;

// WStringOffset
typedef struct 
{
    uint64 WStrOffset;
    if (WStrOffset != 0)
    {
        local uint64 ReturnPos = FTell();
        FSeek(WStrOffset);
        wstring WString <bgcolor=0x666666, fgcolor=0xFF00FA>; //<fgcolor=0xFFBB70>;
        FSeek(ReturnPos);
    }
    else local wstring WString = "(empty)";
} 
WStringOffset <read=WString, write=WriteWStrStringOffset(Str(value), WStrOffset, WString)>;

typedef uint32 hash <format=hex>;//, write="">;



//———————————————/* - FUNCTIONS - */———————————————//

void AddConstraint(wstring BoneNames)
{
    Printf("%s\n", BoneNames);
    local byte ObjectName;
    
    local uint _;
    local uint __;
    local uint item = 0;
    local byte buffer[1024];
    for (_; _ < WStrlen(BoneNames); ++_)
    {
        if (BoneNames[_] != 0x3b && item < 1 ) { buffer[_] = BoneNames[_]; } 
        else if (BoneNames[_] == 0x3b && item == 1)
        {
            for (__; __ < Strlen(buffer); ++__)
            {
                ObjectName[__] = buffer[__];
            }
            ++item;
        }
    }
    Printf("%s, %d\n", Str(ObjectName), WStrlen(ObjectName));
}

void AddCSource(wstring name)
{
    
}

void RangeFWrite( range &r, string s )
{
    SScanf( s, "[%f, %f]", r.min, r.max );
}

void Vec3FWrite( vec3 &v, string s )
{
    SScanf( s, "[%f, %f, %f]", v.axisX, v.axisY, v.axisZ );
}

void Vec4FWrite( vec4 &v, string s )
{
    SScanf( s, "[%f, %f, %f, %f]", v.axisX, v.axisY, v.axisZ, v.axisW );
}

void WriteWStrStringOffset (wstring writeWStr, uint64 offset, wstring sourceWStr)
{
    //Printf("%s, %u, %s\n", writeWStr, offset, sourceWStr);
    if (WStrlen(sourceWStr) == WStrlen(writeWStr))
    { WriteWString(offset, writeWStr); }
};

// Function ConvertBytesToInts - from ConvertBytesToInts.1sc
// Credit: Artur Babecki
int64 ConvertBytesToInts (char type[],char dat[],int n)
{
    //  type[] - source type ("short","int","int64")
    //   dat[] - array of bytes
    //      n  - starting position in the array
    // result  - int64  - do cast (short),(int),(FILETIME) etc. after invoking function
    //                    for other  data types   
    local int i,size;
    local int64 value;
    switch(type)
      {
        case "short":  size=sizeof(int); break;
        case "int":   size=sizeof(int); break;
        case "int64": size=sizeof(int64); break;
        default:    default: 
        MessageBox( idCancel,"ConvertBytesToInts ()", "wrong data type specified : "+type);Exit(-1);
        Printf("Wrong data type in conversion\n");return 0;
     }
    
    if(sizeof(dat)<n+size) {  MessageBox( idCancel,"ConvertBytesToInts ()","request out of array");Exit(-1);}
    
    
    if(IsLittleEndian())
        for( i = 0; i <size; i++ )
        {
        value = (value << 8) + (uchar)dat[size-i+n-1];
        }
    else
        for(i=size;i>0;i--)   
        {value = (value << 8) + (uchar)dat[size-i+n];}
    return value;
}

uint32 fmix32(uint32 h) 
{
    h ^= h >> 16;
    h *= 0x85ebca6b;
    h ^= h >> 13;
    h *= 0xc2b2ae35;
    h ^= h >> 16;
    return h;
}

uint32 murmur3_32(wstring key)
{
    local uint32 c1 = 0xcc9e2d51;
    local uint32 c2 = 0x1b873593;
    local uint32 n = 0xe6546b64;
    local uint32 len = WStrlen(key) * 2;
    local byte data[len];
    
    local uint32 _;
    for (_; _ < len; _++)
    {
        if (_ % 2 != 0)
        {
            data[_] = 0;
        }
        else
        {
            data[_] = key[_ - _ / 2];
        }
    }
    
    local uint32 nblocks = len / 4;
    local uint32 k1;
    
    local uint32 h1 = 0xFFFFFFFF;
    
    local byte kb[4] = 0;
    local int ki;
    local uint32 i;
    for (i = 0; i < nblocks; i++) 
    {
        kb[2] = (data[i * 4 + 2]);
        ki = ConvertBytesToInts("int", kb, 0);
        k1 = (data[i * 4 + 3] ) | ki | (data[i * 4 + 1]) | data[i * 4 + 0];
        k1 *= c1;
        k1 = (k1 << 15) | (k1 >> 17);
        k1 *= c2;
        h1 ^= k1;
        h1 = (h1 << 13) | (h1 >> 19);
        h1 = h1 * 5 + 0xe6546b64;
    }

    local uint32 tail_index = nblocks * 4;
    k1 = 0;
    switch (len & 3) 
    {
        case 3: k1 ^= data[tail_index + 2] << 16;
        case 2: k1 ^= data[tail_index + 1] << 8;
        case 1:
                k1 ^= data[tail_index + 0];
                k1 *= c1;
                k1 = (k1 << 15) | (k1 >> 17);
                k1 *= c2;
                h1 ^= k1;
    }
    h1 ^= len;
    h1 = fmix32(h1);

    return h1;
}



//————————————————/* - STRUCTS - */————————————————//

typedef struct
{
    WStringOffset  Name;
    WStringOffset  Bone1;
    WStringOffset  Bone2;
    if (Version == 29)
    {
        WStringOffset  UnknownWString;
        float          UnknownFloat32;
        float          UnknownFloat32;
        float          UnknownFloat32;
        float          UnknownFloat32;
        float          UnknownFloat32;
        float          UnknownFloat32;
        float          UnknownFloat32;
        float          UnknownFloat32;
    }
        float          UnknownFloat32;
        float          UnknownFloat32;
        float          UnknownFloat32;
        float          UnknownFloat32;
    if (Version > 12)
    { 
        float          UnknownFloat32;
        float          UnknownFloat32;
        float          UnknownFloat32;
        float          UnknownFloat32;
    }
        hash           NameHash;
        hash           Bone1Hash;
        hash           Bone2Hash;
        float          UnknownFloat32;
    if (Version == 29)
    {
        float          UnknownFloat32;
        float          UnknownFloat32;
    }
        uint16         UnknownUINT16;
        uint16         UnknownUINT16;
        uint32         UnknownUINT32;
} 
ExtraJoint <read=Name.WString, optimize=false>;

typedef struct
{
    
    ExtraJoint UnknownJointInfo[header.ExtraJointAmount];
} 
ExtraJointList <read=Str("  < %u Extra Joint(s)... >  ", header.ExtraJointAmount), fgcolor=0xDCED7C>;

// struct SourceExtraInfo
typedef struct
{
    
    float _UnknownFloat32;
    float _UnknownFloat32;
    float _UnknownFloat32;
    float _UnknownFloat32;
    float _UnknownFloat32;
    float _UnknownFloat32;
    DWORD _UnknownDWORD;
} 
SourceExtraInfo;

// struct ConstraintSource_v2
typedef struct
{
    uint64           ExtraInfoOffset <fgcolor=cLtGreen>; 
    WStringOffset    SourceName <name="Source: Name">;
    hash             SourceHash <name="Source: Hash", comment="Hash here is read from file directly.">;
    uint16           ExtraInfoAmount <fgcolor=cLtGreen>;
    uint16           _UnknownUINT16 <fgcolor=cLtBlue>;
    byte             _UnknownByte;
    byte             _UnknownByte;
    AxisID           SourceAxis;
    byte             _UnknownByte;
    byte             _UnknownByte;
    byte             _UnknownByte;
    byte             _UnknownByte;
    byte             _UnknownByte;
    range            MapFromRange <name="MapFrom: Range">;
    range            MapToRange <name="MapTo: Range">;
    vec4             _UnknownVector;
    
    local uint32 returnPos = FTell();
    FSeek(ExtraInfoOffset);
    while (true)
    {
        if (FTell() % 16 != 0) { FSkip(1); }
        else { break; }
    }
    if (ExtraInfoAmount > 0) // Prevent warnings
    { SourceExtraInfo SrcExtInfo[ExtraInfoAmount] <name="UnknownExtraInfo", fgcolor=cLtGreen, optimize=false>; }
    //for (_ = 0; _ < UnknownExt2Amount; ++_)
    //{
    //    UnknownSourceExt2 SrcExt2;
    //}
    FSeek(returnPos);
    
    local string readStr;
    local hash readHash = murmur3_32(SourceName.WString);
    SPrintf(readStr, "%s - %Xh", SourceName.WString, readHash);
} 
ConstraintSource_v2 <read=readStr>;

// struct ConstraintSource_v1
typedef struct
{
    WStringOffset    SourceName <name="Source: Name">;
    hash             SourceHash <name="Source: Hash", comment="Hash here is read from file directly.">;
    range            MapFromRange <name="MapFrom: Range">;
    range            MapToRange <name="MapTo: Range">;
    byte             _UnknownByte;
    byte             _UnknownByte;
    AxisID           SourceAxis;
    byte             UnknownBytes[5];
    vec4             _UnknownVector;
    DWORD            _UnknownDWORD;
   
    local string readStr;
    local hash readHash = murmur3_32(SourceName.WString);
    SPrintf(readStr, "%s - %Xh", SourceName.WString, readHash);
} 
ConstraintSource_v1 <read=readStr>;

// struct ConstraintSourceList
typedef struct
{
    //byte CnsInput <name="Input name here to add source...", read="  <Object Name>  ", write=AddCSource(WStr(value))>;
    //FSkip(-1);
    
    uint64  OffsetSourceList;
    local uint ReturnPos = FTell();
    if (Version > 12) 
    { 
        FSkip(25); 
        uint8   SourceAmount;
        FSeek(OffsetSourceList);
        if (SourceAmount > 0) // Prevent warnings
        { ConstraintSource_v2 CSource[SourceAmount] <name="Constraint: Source", optimize=false>; }
    }
    else 
    { 
        FSkip(17); 
        uint8   SourceAmount;
        FSeek(OffsetSourceList);
        if (SourceAmount > 0) // Prevent warnings
        { ConstraintSource_v1 CSource[SourceAmount] <name="Constraint: Source", optimize=false>; }
    }
    FSeek(ReturnPos);
    
} 
ConstraintSourceList <name="Constraint: Source List", read=Str("< %u Constraint Source(s) >", parentof(this).SourceAmount), fgcolor=cLtRed>;

//struct ExtraConstraintInfo
typedef struct 
{
    uint64  Offset;
    local uint64 ReturnPos = FTell();
    if (Version > 12) { FSkip(32); }
    else { FSkip(24); }
    uint8   Amount;
    if (Amount > 0)
        {
        FSeek(Offset);
        struct 
        {
            float    _UnknwonFloat32;
            float    _UnknwonFloat32;
            uint8    _UnknownUINT8 <comment="Usually 3">;
            //AxisID   Axis  <comment="Not sure">;
            uint8    _UnknownUINT8 <comment="Axis?">;
            uint8    _UnknownUINT8;
            uint8    _UnknownUINT8;
        } //ExtraInfo[Amount] <read=Str("%s : (%f, %f)", EnumToString(Axis), _UnknwonFloat32[0], _UnknwonFloat32[1]), optimize=false>;
        ExtraInfo[Amount] <read=Str("%u : (%f, %f)", _UnknownUINT8[1], _UnknwonFloat32[0], _UnknwonFloat32[1]), optimize=false>;
    }
    FSeek(ReturnPos);
}
ExtraConstraintInfo <name="Constraint: Extra Info", read=Str("< %u Extra Constraint Info(s) >", Amount), fgcolor=cLtYellow>;

// struct Constraint
typedef struct
{
    ExtraConstraintInfo    ExtraCnsInfo;
    ConstraintSourceList   CSourceList <open=suppress>;
    WStringOffset          ObjectName <name="Object: Name", comment="Name of bone, material, blendshape, RSZobject, etc.">;
    if (Version > 12)
    { WStringOffset        Property <name="Object: Property", comment="Object Property, such as Blend_[A-F] for material, etc.">; }
    hash                   ObjectHash <name="Object: Hash", comment="Hash here is read from file directly.">;
    if (Version > 12)
    { hash                 PropertyHash <name="Property: Hash", comment="Hash here is read from file directly.">; }
    else
    { uint32               _UnknownUINT32; }
    uint8                  StandaloneConstraintInfoAmount <fgcolor=cLtYellow, bgcolor=cBlack>;
    uint8                  SourceAmount   <fgcolor=cLtRed, bgcolor=cBlack>;
    uint8                  _UnknownByte   <bgcolor=cBlack, comment="Mix?">;
    TransformationID       Transformation <bgcolor=cBlack>;
    uint8                  _UnknownByte   <bgcolor=cBlack>;
    AxisID                 TransformAxis  <bgcolor=cBlack>;
    uint8                  _UnknownByte   <bgcolor=cBlack>;
    uint8                  _UnknownByte   <bgcolor=cBlack>;
    vec4                   _UnknownVector;
    if (Version >= 21)
    {
        float              _UnknownFloat32[2];
        QWORD              UnknownQWORD;
    }
    local string readStr;
    local hash readHash = murmur3_32(ObjectName.WString);
    
    if (SourceAmount > 1) { SPrintf(readStr, "%s[%Xh] << %s[%Xh]...<%u more>", ObjectName.WString, readHash, CSourceList.CSource[0].SourceName.WString, CSourceList.CSource[0].readHash, SourceAmount - 1); }
    else if (SourceAmount == 1) { SPrintf(readStr, "%s[%Xh] << %s[%Xh]", ObjectName.WString, readHash, CSourceList.CSource.SourceName.WString, CSourceList.CSource.readHash); }
    else { SPrintf(readStr, "%s[%Xh]", ObjectName.WString, readHash); }
    //SPrintf(readStr, "%s - %s [%X,%X]", ConstraintName.WString, CSource.Source.WString, readHash, CSource.readHash);
} 
ConstraintInfo <read=readStr, write="">;

// struct ConstraintList
typedef struct 
{
    //byte CnsInput <name="Input bones here to add a new constraint...", read="Example: ObjectName;SourceName1;SourceName2;...", write=AddConstraint(Str(value))>;
    //FSkip(-1);
    
    ConstraintInfo Constraint[header.ConstraintAmount] <name="Constraint", optimize=false>;
    
} 
ConstraintList <read=Str("  < %u Constraint(s)... >  ",header.ConstraintAmount)>;

// struct Reference
typedef struct
{
    uint64 Offset;
    uint64 SourceAmount;
    if (Offset != 0)
    {
        local uint ReturnPos = FTell();
        FSeek(Offset);
        hash ObjectHash;
        
        local string readStr;
        if (SourceAmount != 0)
        {
            for (_ = 0; _ < SourceAmount; ++_)  // Don't collapse it
            {
                hash SourceHash;
            }
            if (SourceAmount == 1) { SPrintf(readStr, "%Xh << %Xh", ObjectHash, SourceHash); }
            else { SPrintf(readStr, "%Xh << %Xh...<%u more>", ObjectHash, SourceHash[0], SourceAmount - 1); }
        }
        else { SPrintf(readStr, "%Xh", ObjectHash); }
        
        FSeek(ReturnPos);
    }
} 
ReferenceInfo <read=readStr>;

// struct ReferenceList
typedef struct
{
    //byte RefInput <name="Input here to add a new reference...", read="ObjectHash - SourceHash">;
    //FSkip(-1);
    ReferenceInfo Reference[header.ReferenceAmount] <optimize=false>;
} 
ReferenceList <read=Str("  < %u Reference(s)... >  ", header.ReferenceAmount)>;

//struct ConstraintSettings
typedef struct
{
    uint64 HashOffset;
    local uint64 ReturnPos = FTell();
    FSeek(HashOffset);
    hash   UnknownHash;
    FSeek(ReturnPos);
    uint8  UnknownUINT8;
    uint8  UnknownUINT8;
    uint8  UnknownUINT8;
    uint8  UnknownUINT8;
    DWORD  UnknownDWORD;
} 
ConstraintSettings;

//struct ConstraintSettingList
typedef struct
{
    //byte SetInput <name="Input here to add a new setting...">;
    //FSkip(-1);
    ConstraintSettings ConstraintSetting[header.ConstraintSettingAmount] <optimize=false>;
} 
ConstraintSettingList <read=Str("  < %u Setting(s)... >  ", header.ConstraintSettingAmount)>;



//struct OrientationInfo
typedef struct
{
    
    vec4  Rotation;
    vec4  Scale;
    hash  BoneHash;
    hash  SourceBoneHash <comment="Hash of bone that orientation copied from.">;
    uint8 UnknownUINT8;
    uint8 UnknownUINT8;
    uint8 UnknownUINT8;
    uint8 UnknownUINT8;
    float UnknownFloat32;
    float UnknownFloat32;
    float UnknownFloat32;
} 
OrientationInfo;

typedef struct
{
    
    uint64 SourceOffset;
    FSkip(4);
    uint32 SourceAmount;
    FSkip(-8);
    local uint returnPos = FTell();
    FSeek(SourceOffset);
    struct { uint  SourceHashIndex; float Weight; } Source[SourceAmount] <read=Str("Index: %u Weight: %f", SourceHashIndex, Weight), optimize=false>;
    FSeek(returnPos);
} 
ConstraintSimpleSrc;

typedef struct
{
    ConstraintSimpleSrc  SourceInfo;
    hash                 ObjectHash;
    FSkip(4);
} 
ConstraintSimple <read=Str("%X <%u Source(s)>", ObjectHash, SourceInfo.SourceAmount)>;

typedef struct
{
    
    uint64   offset;
    local uint returnPos = FTell();
    FSeek(offset);
    hash     TargetBoneHash;
    float    Influence;
    QWORD    Padding;
    FSeek(returnPos);
} 
AimTargetInfo <read=Str("%Xh", TargetBoneHash), write="">;

typedef struct
{
    AimTargetInfo      TargetInfo;
    hash               BoneHash;
    hash               UnknownBoneHash;
    //float              UnknownFloat[12];
    vec3               UnknownVector;
    vec3               TrackVector;
    vec3               UnknownVector; 
    vec3               UnknownVector;
    uint8              RotationMode;
    uint8              UnknownByte;
    uint8              UnknownByte;
    uint8              UnknownByte;
    uint8              UnknownBytes[12] <comment="Usually 0.">;
} 
ConstraintAim <read=Str("%Xh <- %Xh", BoneHash, TargetInfo.TargetBoneHash)>;

typedef struct
{
    hash              BoneHash;
    hash              MaterialNameHash;
    hash              MaterialPropertyHash;
    TransformationID  Transformation;
    uint8             UnknownUINT8;
    uint8             UnknownUINT8;
    uint8             UnknownUINT8;
} 
MatDriveInfo <read=Str("%Xh", BoneHash), write="">;



//———————————————/* - STRUCTURES - */———————————————//
// HEADER
typedef struct
{
    struct TAG
    {
        byte   signature[4];
        QWORD _unknownQWORD;
        uint64 InfoOffset;
        QWORD _unknownQWORD;
        uint64 FileEntry;
        QWORD _unknownQWORD;
        FSeek(InfoOffset);
        QWORD _unknownQWORD;
        QWORD _unknownQWORD;
        FSeek(FileEntry);
        uint64 DataOffset;
        QWORD _unknownQWORD;
    } Tags <comment="Usually the same in most files from diffent RE games.">;
    FSeek(Tags.DataOffset);
    switch (Version)
    {
    case 29: // MHWs
        uint64 ExtraJointMapOffset;
        uint64 ConstraintInfoOffset;
        uint64 ConstraintSettingOffset;
        uint64 OrientInfoOffset;
        uint64 OrientSettingsOffset;
        uint64 SimpleConstraintTableOffset;
        uint64 SimpleConstraintSourceTableOffset;
        uint64 AimConstraintTableOffset;
        uint64 MaterialDriveInfoOffset;
        uint64 JointExportGraphInfoOffset;
        uint64 SectionTypeOffset;
        uint64 ReferenceTableOffset;
        uint16 ExtraJointAmount;
        uint16 ConstraintAmount;
        uint16 ReferenceAmount;
        uint16 ConstraintSettingAmount;
        uint16 OrientInfoAmount;
        uint16 OrientSettingAmount;
        uint16 SimpleConstraintAmount;
        uint16 SimpleConstraintSourceAmount;
        uint16 AimConstraintAmount;
        uint16 MaterialDriveInfoAmount;
        uint8  SectionAmount;
        local uint64 returnPos = FTell();
        FSeek(SectionTypeOffset);
        uint SectionType[SectionAmount];
        FSeek(returnPos);
        byte UnknownBytes[11] <hidden=true>;
        break;
    case 22: // RE4R
        uint64 ExtraJointMapOffset;
        uint64 ConstraintInfoOffset;
        uint64 ConstraintSettingOffset;
        QWORD _UnknownQWORD;
        QWORD _UnknownQWORD;
        uint64 SimpleConstraintTableOffset;
        uint64 SimpleConstraintSourceTableOffset;
        QWORD _UnknownQWORD;
        uint64 SectionTypeOffset;
        local uint64 returnPos = FTell();
        FSeek(SectionTypeOffset);
        uint SectionType[5];
        FSeek(returnPos);
        uint64 ReferenceTableOffset;
        uint16 ExtraJointAmount;
        uint16 ConstraintAmount;
        uint16 ReferenceAmount;
        uint16 ConstraintSettingAmount;
        QWORD _UnknownQWORD;
        QWORD _UnknownQWORD;
        QWORD _UnknownQWORD;
        break;
    case 21: // MHRS
        uint64 ExtraJointMapOffset;
        uint64 ConstraintInfoOffset;
        uint64 ConstraintSettingOffset;
        QWORD _UnknownQWORD;
        QWORD _UnknownQWORD;
        uint64 SimpleConstraintTableOffset;
        uint64 SimpleConstraintSourceTableOffset;
        uint64 SectionTypeOffset;
        local uint64 returnPos = FTell();
        FSeek(SectionTypeOffset);
        uint SectionType[4];
        FSeek(returnPos);
        uint64 ReferenceTableOffset;
        uint16 ExtraJointAmount;
        uint16 ConstraintAmount;
        uint16 ReferenceAmount;
        uint16 ConstraintSettingAmount;
        QWORD _UnknownQWORD;
        QWORD _UnknownQWORD;
        break;
    case 16: // RE8
        uint64 ExtraJointMapOffset;
        uint64 ConstraintInfoOffset;
        uint64 ConstraintSettingOffset;
        QWORD _UnknownQWORD;
        QWORD _UnknownQWORD;
        uint64 SimpleConstraintTableOffset;
        uint64 SimpleConstraintSourceTableOffset;
        uint64 SectionTypeOffset;
        local uint64 returnPos = FTell();
        FSeek(SectionTypeOffset);
        uint SectionType[4];
        FSeek(returnPos);
        uint16 ExtraJointAmount;
        uint16 ConstraintAmount;
        uint16 ConstraintSettingAmount;
        uint16 _UnknownUINT16;
        QWORD _UnknownQWORD;
        break;
    case 12: // RE3R
        uint64 ExtraJointMapOffset;
        uint64 ConstraintInfoOffset;
        uint64 ConstraintSettingOffset;
        QWORD _UnknownQWORD;
        QWORD _UnknownQWORD;
        uint64 SimpleConstraintTableOffset;
        uint64 SimpleConstraintSourceTableOffset;
        uint16 ExtraJointAmount;
        uint16 ConstraintAmount;
        uint16 ConstraintSettingAmount;
        uint16 _UnknownUINT16;
        QWORD _UnknownQWORD;
        QWORD _UnknownQWORD;
        break;
    case 11: // RE2R
        uint64 ExtraJointMapOffset;
        uint64 ConstraintInfoOffset;
        uint64 ConstraintSettingOffset;
        QWORD _UnknownQWORD;
        QWORD _UnknownQWORD;
        QWORD _UnknownQWORD;
        uint16 ExtraJointAmount;
        uint16 ConstraintAmount;
        uint16 ConstraintSettingAmount;
        uint16 _UnknownUINT16;
        QWORD _UnknownQWORD;
        break;
    default:
        uint64 ExtraJointMapOffset;
        uint64 ConstraintInfoOffset;
        uint64 ConstraintSettingOffset;
        break;
    }
} 
HEADER <name="JCNS Header">;

// BODY
typedef struct 
{
    if (header.ExtraJointAmount > 0)
    {
        FSeek(header.ExtraJointMapOffset);
        ExtraJointList ExtraJoints;
    }
    if (header.ConstraintAmount > 0)
    {
        FSeek(header.ConstraintInfoOffset);
        ConstraintList ConstraintSets;
    }
    if (Version >= 21 && header.ReferenceAmount > 0)
    {
        FSeek(header.ReferenceTableOffset);
        ReferenceList References;
    }
    if (header.ConstraintSettingAmount > 0)
    {
        FSeek(header.ConstraintSettingOffset);
        ConstraintSettingList Settings;
    }
} 
BODY0 <name="JCNS Section (Type 0: Transformation)", fgcolor=0xFFBD9A, open=true>;

typedef struct 
{
    FSeek(header.OrientInfoOffset);
    OrientationInfo OrientInfo[header.OrientInfoAmount];
    FSeek(header.OrientSettingsOffset);
    uint8 OrientModeSettings[header.OrientSettingAmount];
}
BODY1 <name="JCNS Section (Type 1: Orient)", fgcolor=0xBDFF9A, open=true>;

typedef struct
{
    FSeek(header.SimpleConstraintTableOffset);
    struct 
    {
        ConstraintSimple SimpleConstraint[header.SimpleConstraintAmount] <fgcolor=0xFF7CEF, optimize=false>;
    } SimpleConstraintInfo;
    
    if (header.SimpleConstraintSourceAmount != 0)
    {
        FSeek(header.SimpleConstraintSourceTableOffset);
        hash SourceHashes[header.SimpleConstraintSourceAmount];
    }
}
BODY2 <name="JCNS Section (Type 2: Simple)", open=true, fgcolor=0xFF7CEF>;

typedef struct
{
    FSeek(header.AimConstraintTableOffset);
    ConstraintAim AimConstraint[header.AimConstraintAmount] <optimize=false>;
}
BODY3 <name="JCNS Section (Type 3: Aim)", fgcolor=0xEDDC7C>;

typedef struct
{
    FSeek(header.MaterialDriveInfoOffset);
    MatDriveInfo MaterialDriveInfo[header.MaterialDriveInfoAmount] <optimize=false>;
}
BODY4 <name="JCNS Section (Type 4: Material Drive)", fgcolor=0x00EDFF>;

typedef struct 
{
    //WStringOffset JointExportGraphPath;
    FSeek(header.JointExportGraphInfoOffset);
    uint64 PathOffset;
    FSeek(PathOffset);
    wstring Path;
} 
BODY5 <name="JCNS Section (Type 5: Joint Export Graph Info)", open=true, fgcolor=0x0000ED>;



//—————————————————/* - FILES - */—————————————————//
uint32 Version;
HEADER header;

// Maybe do this for other RE games... If time allows
switch (Version)
{
    case 29: // MHWs
        if (header.ExtraJointAmount > 0 || header.ConstraintAmount > 0)
        {
            BODY0 body0;
        }
        if (header.OrientInfoAmount > 0)
        {
            BODY1 body1;
        }
        if (header.SimpleConstraintAmount > 0)
        {
            BODY2 body2;
        }
        if (header.AimConstraintAmount > 0)
        {
            BODY3 body3;
        }
        if (header.MaterialDriveInfoAmount > 0)
        {
            BODY4 body4;
        }
        if (header.JointExportGraphInfoOffset > 0)
        {
            BODY5 body5;
        }
        break;
    case 22: // RE4R
        if (header.ExtraJointAmount > 0 || header.ConstraintAmount > 0)
        {
            BODY0 body0;
        }
        break;
    case 21: // MHRS
        if (header.ExtraJointAmount > 0 || header.ConstraintAmount > 0)
        {
            BODY0 body0;
        }
        break;
    case 16: // RE8
        if (header.ExtraJointAmount > 0 || header.ConstraintAmount > 0)
        {
            BODY0 body0;
        }
        break;
    case 12: // RE3R
        if (header.ExtraJointAmount > 0 || header.ConstraintAmount > 0)
        {
            BODY0 body0;
        }
        break;
    case 11: // RE2R
        if (header.ExtraJointAmount > 0 || header.ConstraintAmount > 0)
        {
            BODY0 body0;
        }
        break;
}